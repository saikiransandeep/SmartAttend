Smart Attendance Tracking System

Background:
Tracking student attendance is critical for academic compliance, discipline, and performance evaluation. Traditional paper registers and manual Excel entries are slow, error-prone, and make it difficult to monitor attendance at different levels (faculty, department, institution). A smart, digital attendance tracking system can make the process faster, eliminate errors, and provide real-time visibility to faculty, HoDs, incharges, and management. 
Problem Statement:
Develop and implement a role-based, real-time attendance tracking system. This system should enable faculty to quickly mark attendance for their classes and provide attendance trends visible at multiple organizational levels, including faculty, class incharge, HoD, Dean, and Principal.
     Users and Access Levels:
Faculty: Mark and edit attendance, view subject-wise statistics.
Students: View their attendance percentage.
Class Incharge: View consolidated class attendance and generate lists of defaulters.
HoD: View department-wide attendance data and generate reports.
Principal/Dean: View institution-wide attendance statistics.
Special Case: Attendance for First-Year students will be managed by the HoD of Basic Sciences & Humanities (BS&H).
Inputs Required:
Student database (including roll number, name, and section).
Faculty database (listing subjects handled by each faculty member).
Timetable data (from Problem Statement 1).
Attendance parameters (e.g., holidays, On Duty (OD) permissions).
Core Features and Requirements:
Quick Attendance Marking: Easy toggling to mark absentees.
Batch-wise Marking: Support for marking attendance in split lab sessions.
Role-Based Dashboards: Customized dashboards for faculty, students, class incharges, HoDs, and the Principal.
Comprehensive Analytics: Subject-wise, class-wise, and department-wise attendance analytics.
Data Security: Secure data access with tamper-proof logs.
Timetable Integration: Seamless integration with the existing timetable system.
Expected Output:
A web/mobile application for attendance marking and tracking.
Generation of daily attendance sheets and consolidated reports.
An analytics dashboard featuring graphs and heat maps for visual representation of attendance data.


Project Plan
TechStack Choosen:
Frontend: React js along with next Js
Backend:Node.js with the NestJS framework
Database:PostgreSQL
Real-time Communication: WebSockets (via Socket.IO).



Postgre sql Database schema:

-- ===============================
-- Smart Attendance Tracking System (Unified Schema)
-- ===============================

-- Enable UUID extension (for PostgreSQL)
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- ===============================
-- Roles & Users
-- ===============================
CREATE TABLE roles (
    role_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    role_name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    role_id UUID NOT NULL REFERENCES roles(role_id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX ix_users_role_id ON users(role_id);

-- ===============================
-- Departments
-- ===============================
CREATE TABLE departments (
    department_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    code VARCHAR(50) NOT NULL UNIQUE,
    hod_employee_id UUID,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ===============================
-- Employees (Faculty/Staff)
-- ===============================
CREATE TABLE employees (
    employee_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(20),
    department_id UUID REFERENCES departments(department_id),
    designation VARCHAR(100),
    join_date DATE NOT NULL,
    active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE departments
    ADD CONSTRAINT fk_hod FOREIGN KEY (hod_employee_id) REFERENCES employees(employee_id);

CREATE INDEX ix_employees_department ON employees(department_id);

-- ===============================
-- Sections (Class Groups)
-- ===============================
CREATE TABLE sections (
    section_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    department_id UUID NOT NULL REFERENCES departments(department_id),
    year SMALLINT NOT NULL,
    section_name VARCHAR(50) NOT NULL,
    semester SMALLINT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX ix_sections_department ON sections(department_id);

-- ===============================
-- Students
-- ===============================
CREATE TABLE students (
    student_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    admission_no VARCHAR(50) NOT NULL UNIQUE,
    roll_no VARCHAR(50) UNIQUE,
    name VARCHAR(255) NOT NULL,
    dob DATE,
    email VARCHAR(255) UNIQUE,
    phone VARCHAR(20),
    section_id UUID REFERENCES sections(section_id),
    photo_url TEXT,
    status VARCHAR(20) DEFAULT 'active',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX ix_students_section ON students(section_id);

-- ===============================
-- Subjects
-- ===============================
CREATE TABLE subjects (
    subject_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    code VARCHAR(50) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    credit_hours SMALLINT NOT NULL,
    department_id UUID NOT NULL REFERENCES departments(department_id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ===============================
-- Subject Assignments (Faculty ↔ Subject ↔ Section)
-- ===============================
CREATE TABLE subject_assignments (
    assignment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    section_id UUID NOT NULL REFERENCES sections(section_id),
    subject_id UUID NOT NULL REFERENCES subjects(subject_id),
    faculty_id UUID NOT NULL REFERENCES employees(employee_id),
    assigned_by UUID REFERENCES employees(employee_id),
    start_date DATE NOT NULL,
    end_date DATE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX ix_subj_assign_section ON subject_assignments(section_id);

-- ===============================
-- Class Incharge Assignments
-- ===============================
CREATE TABLE class_incharge_assignments (
    assignment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    section_id UUID NOT NULL REFERENCES sections(section_id),
    employee_id UUID NOT NULL REFERENCES employees(employee_id),
    assigned_by UUID REFERENCES employees(employee_id),
    start_date DATE NOT NULL,
    end_date DATE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX ix_incharge_section ON class_incharge_assignments(section_id);

-- ===============================
-- Timetables & Slots
-- ===============================
CREATE TABLE timetables (
    timetable_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    section_id UUID NOT NULL REFERENCES sections(section_id),
    week_start_date DATE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX ix_timetables_section ON timetables(section_id);

CREATE TABLE timetable_slots (
    slot_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    timetable_id UUID NOT NULL REFERENCES timetables(timetable_id),
    day_of_week SMALLINT NOT NULL CHECK (day_of_week BETWEEN 1 AND 7),
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    subject_id UUID REFERENCES subjects(subject_id),
    faculty_id UUID REFERENCES employees(employee_id),
    is_lab BOOLEAN DEFAULT FALSE,
    lab_type VARCHAR(100),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ===============================
-- Holidays
-- ===============================
CREATE TABLE holidays (
    date DATE PRIMARY KEY,
    description TEXT,
    is_holiday BOOLEAN DEFAULT TRUE
);

-- ===============================
-- Attendance Sessions & Records
-- ===============================
CREATE TABLE attendance_sessions (
    session_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    slot_id UUID NOT NULL REFERENCES timetable_slots(slot_id),
    date DATE NOT NULL,
    start_time TIME,
    end_time TIME,
    status VARCHAR(20) DEFAULT 'scheduled'
        CHECK (status IN ('scheduled', 'completed', 'holiday', 'cancelled')),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT fk_session_holiday
        FOREIGN KEY (date) REFERENCES holidays(date)
        DEFERRABLE INITIALLY DEFERRED
);

CREATE TABLE attendance_records (
    record_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id UUID NOT NULL REFERENCES attendance_sessions(session_id),
    student_id UUID NOT NULL REFERENCES students(student_id),
    status VARCHAR(20) NOT NULL CHECK (status IN ('Present', 'Absent', 'OD')),
    marked_by UUID REFERENCES employees(employee_id),
    marked_at TIMESTAMPTZ DEFAULT NOW(),
    source VARCHAR(50),
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX ix_attendance_session ON attendance_records(session_id);
CREATE INDEX ix_attendance_student ON attendance_records(student_id);

-- ===============================
-- OD Requests
-- ===============================
CREATE TABLE od_requests (
    od_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    student_id UUID NOT NULL REFERENCES students(student_id),
    date DATE NOT NULL,
    reason TEXT,
    status VARCHAR(20) DEFAULT 'pending',
    approved_by UUID REFERENCES employees(employee_id),
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX ix_od_student ON od_requests(student_id);
CREATE INDEX ix_od_date ON od_requests(date);

-- ===============================
-- Audit Logs
-- ===============================
CREATE TABLE audit_logs (
    audit_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(user_id),
    action VARCHAR(100) NOT NULL CHECK (action IN ('MARK', 'EDIT', 'DELETE')),
    entity_type VARCHAR(50) NOT NULL,
    entity_id UUID,
    before_data JSONB,
    after_data JSONB,
    timestamp TIMESTAMPTZ DEFAULT NOW(),
    ip VARCHAR(45),
    reason TEXT
);

CREATE INDEX ix_audit_user ON audit_logs(user_id);







Hackathon Build Map (with Free Tools)
Stage 1: UI → Frontend Code
Tool: v0.dev (by Vercel)


Input: Your Stitch AI exports → Figma file / HTML+CSS.


Action: Generate Next.js components directly from your design.


Output: Clean React/Next.js code + Tailwind styles (editable).


Next Step: Paste code into your main project in Cursor.



Stage 2: Backend Scaffolding
Tool: Cursor AI Editor (your main IDE).


Input: Tech stack details (NestJS, Node.js, PostgreSQL).


Action:


Scaffold NestJS project (modules, controllers, services).


Add Socket.IO gateway for real-time attendance.


Connect backend to Postgres using Prisma or TypeORM.


Output: Running backend with REST + WebSocket endpoints.



Stage 3: Database Design
Tool: dbdiagram.io (visual schema) → export SQL/Prisma.


Entities: Students, Faculty, Courses, Attendance Records.


Action:


Design schema visually.


Export to SQL or Prisma schema.


Run migrations in backend (via Cursor).


Output: Ready Postgres schema + models.



Stage 4: Frontend ↔ Backend Integration
Tool: Cursor AI again (best for wiring).


Action:


Connect frontend forms/tables to backend APIs.


Add real-time attendance updates via Socket.IO client in Next.js.


Test end-to-end locally.


Output: Live app on localhost with UI + backend + DB connected.



Stage 5: Deployment
Frontend: Vercel (free) → deploy Next.js app.


Backend: Railway or Render (free tier) → deploy NestJS + Postgres.


Action:


Deploy backend first → copy API + WebSocket URL.


Add backend URL to frontend .env.


Deploy frontend on Vercel.


Output: Publicly accessible smart attendance system.
